# @package _global_

# to execute this experiment run:
# python main.py +experiment=dw

defaults:
    - /nn@model.score.nn: mlp.yaml
    - override /datamodule: custom_datamodule.yaml

sample:
  nsamples : 500
  return_prob : False
  return_traj : True
  method : ode

seed: 42
device: cuda:0

trainer:
  max_epochs: 10

logger:
    mlflow:
      experiment_name: "DW"

datamodule:
  data_path: /mnt/ssd/MCMC/mcmc/data/dw_train.npy
  test_data_path: /mnt/ssd/MCMC/mcmc/data/dw_test.npy
  distribution:
    _target_: mcmc.distributions.double_well.DW  
    nparticles: 4
    dim : 2
    a : 0
    b : -4
    c : 0.9
    offset : 4
    device : ${device}

model:
  _target_: gen.diffusion.diffusion.DiffusionModel
  lr : 3e-4
  device : cuda
  shape : [4,2]

  sde :
    _target_: gen.diffusion.sde.PiecewiseSDE
    type :  [VP_SDE]
    schedule : linear
    kT : 1.0
    translation_inv : True
    device : ${device}
    data_handler : ${datamodule}
    #type : [GeneralSDE, VP_SDE]
    #knots : [0.2]
    #friction : 10.0

  score:
    _target_: gen.diffusion.score.Score
    correction:
      _target_: gen.diffusion.score.Correction
      data_handler : ${datamodule}
      # from 0 to ${duration}: gradually decrease the force correction;
      # from ${duration} to 1: gradually increase the linear correction
      duration : 0.1
    single_nn : True # if False, use a separate nn for each segment of the SDE. Needed only when the SDE is piecewise
    sde : ${model.sde} 

  data_handler : ${datamodule}

