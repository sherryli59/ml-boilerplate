# @package _global_

# to execute this experiment run:
# python main.py +experiment=dw run_name=${run_name}

defaults:
    - /nn@model.score.nn: mlp.yaml
    #- override /hydra/launcher: submitit_slurm
    - override /datamodule: custom_datamodule.yaml

# hydra:
#   sweeper:
#     params:
#       model.sde.friction: 5,10


sample:
  nsamples : 100
  return_prob : True
  return_traj : True
  method : ode

seed: 42

trainer:
  max_epochs: 5

logger:
    mlflow:
      experiment_name: "DW"

datamodule:
  data_path:  /mnt/ssd/MCMC/mcmc/data/dw_periodic_long.npy
  test_data_path:  /mnt/ssd/MCMC/mcmc/data/dw_periodic.npy
  distribution:
    _target_: mcmc.distributions.double_well.DW  
    nparticles: 4
    dim : 2
    a : 0
    b : -4
    c : 0.9
    offset : 4
    boxlen : 10

model:
  _target_: gen.diffusion.diffusion.DiffusionModel
  lr : 3e-4
  shape : [4,2]

  sde :
    # _target_: gen.diffusion.sde.ToroidalDiffusion
    # schedule : linear
    # #kT : 1
    # translation_inv : True
    # periodic_boxlen : 10.0
    # data_handler : ${datamodule}

    _target_: gen.diffusion.sde.PiecewiseSDE
    schedule : linear
    kT : 1.0
    periodic_boxlen : 10.0
    translation_inv : False
    data_handler : ${datamodule}
    type : [GeneralSDE, ToroidalDiffusion]
    knots : [0.2]
    friction : 10.0

  score:
    _target_: gen.diffusion.score.Score
    correction:
      _target_: gen.diffusion.score.Correction
      data_handler : ${datamodule}
      # from 0 to ${duration}: gradually decrease the force correction;
      # from ${duration} to 1: gradually increase the linear correction
      duration : 0.0
    single_nn : True # if False, use a separate nn for each segment of the SDE. Needed only when the SDE is piecewise
    sde : ${model.sde} 

  data_handler : ${datamodule}


